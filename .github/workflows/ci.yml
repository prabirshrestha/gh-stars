name: CI

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - ci/*
    tags:
      - "v0.[0-9]+.[0-9]+"
      - "v0.[0-9]+.[0-9]+-beta.[0-9]+"
      - "v0.[0-9]+.[0-9]+-alpha.[0-9]+"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check that the Cargo.toml has been updated with tag if release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          if ! grep -E "version[ ]*=[ ]*.${GITHUB_REF#refs/tags/v}." Cargo.toml; then
            echo "Cargo.toml version does not match tag, version in current Cargo.toml:"
            exit 1
          fi
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract crate information
        id: crate_metadata
        run: |
          cargo metadata --no-deps --format-version 1 | jq -r '"name=" + .packages[0].name' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"version=" + .packages[0].version' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"maintainer=" + .packages[0].authors[0]' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"homepage=" + .packages[0].homepage' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"msrv=" + .packages[0].rust_version' | tee -a $GITHUB_OUTPUT
    outputs:
      name: ${{ steps.crate_metadata.outputs.name }}
      version: ${{ steps.crate_metadata.outputs.version }}
      maintainer: ${{ steps.crate_metadata.outputs.maintainer }}
      homepage: ${{ steps.crate_metadata.outputs.homepage }}
      msrv: ${{ steps.crate_metadata.outputs.msrv }}

  build:
    name: ${{ matrix.job.os }}-${{ matrix.job.target }}
    needs: [check, crate_metadata]
    env:
      BUILD_CMD: cargo
      EXTENSION: ""
      NAME: ${{ needs.crate_metadata.outputs.name }}
      VERSION: ${{ needs.crate_metadata.outputs.version }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              os: ubuntu-latest,
              target: x86_64-unknown-linux-gnu,
              bin_ext: "",
              archive_ext: ".tar.gz",
            }
          # - {
          #     os: ubuntu-latest,
          #     target: x86_64-unknown-linux-musl,
          #     bin_ext: "",
          #     archive_ext: ".tar.gz",
          #     use_cross: true,
          #   }
          - {
              os: windows-latest,
              target: x86_64-pc-windows-msvc,
              bin_ext: ".exe",
              archive_ext: ".zip",
            }
          - {
              os: macos-latest,
              target: x86_64-apple-darwin,
              bin_ext: "",
              archive_ext: ".tar.gz",
            }
          - {
              os: macos-latest,
              target: aarch64-apple-darwin,
              bin_ext: "",
              archive_ext: ".tar.gz",
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
      - name: install rustup targets
        run: rustup target add ${{ matrix.job.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install cross
        if: matrix.job.use_cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Overwrite build command env variable
        if: matrix.job.use_cross
        shell: bash
        run: echo "BUILD_CMD=cross" >> $GITHUB_ENV
      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup show
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V
      - name: Set extensions from matrix
        shell: bash
        run: |
          echo "BIN_EXT=${{ matrix.job.bin_ext }}" >> $GITHUB_ENV
          echo "ARCHIVE_EXT=${{ matrix.job.archive_ext }}" >> $GITHUB_ENV
      - name: Build on ${{ matrix.job.target }}
        shell: bash
        run: $BUILD_CMD build --locked --all --release --target=${{ matrix.job.target }}
      - name: Prepare archive
        shell: bash
        working-directory: target/${{ matrix.job.target }}/release
        run: |
          strip ${{ env.NAME }}${{ env.BIN_EXT }}
          if [[ "${{ matrix.job.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ env.NAME }}-v${{ env.VERSION }}-${{ matrix.job.target }}${{ env.ARCHIVE_EXT }} ${{ env.NAME }}${{ env.BIN_EXT }}
          else
            tar czvf ../../../${{ env.NAME }}-v${{ env.VERSION }}-${{ matrix.job.target }}${{ env.ARCHIVE_EXT }} ${{ env.NAME }}${{ env.BIN_EXT }}
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}-v${{ env.VERSION }}-${{ matrix.job.target }}${{ env.ARCHIVE_EXT }}
          path: ${{ env.NAME }}-v${{ env.VERSION }}-${{ matrix.job.target }}${{ env.ARCHIVE_EXT }}
          if-no-files-found: error

  publish_crate:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
      - crate_metadata
    env:
      NAME: ${{ needs.crate_metadata.outputs.name }}
      VERSION: ${{ needs.crate_metadata.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - publish_crate
      - crate_metadata
    env:
      NAME: ${{ needs.crate_metadata.outputs.name }}
      VERSION: ${{ needs.crate_metadata.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Move artifacts to root directory
        run: |
          mv ./artifacts/*/* .
      - name: Generate checksums
        run: for file in ${{ env.NAME }}-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.NAME }}-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
