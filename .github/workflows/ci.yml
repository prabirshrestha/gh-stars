name: Cl

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - ci/*
    tags:
      - "v0.[0-9]+.[0-9]+"
      - "v0.[0-9]+.[0-9]+-beta.[0-9]+"
      - "v0.[0-9]+.[0-9]+-alpha.[0-9]+"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check that the Cargo.toml has been updated with tag if release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          if ! grep -E "version[ ]*=[ ]*.${GITHUB_REF#refs/tags/v}." Cargo.toml; then
            echo "Cargo.toml version does not match tag, version in current Cargo.toml:"
            exit 1
          fi
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract crate information
        id: crate_metadata
        run: |
          cargo metadata --no-deps --format-version 1 | jq -r '"name=" + .packages[0].name' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"version=" + .packages[0].version' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"maintainer=" + .packages[0].authors[0]' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"homepage=" + .packages[0].homepage' | tee -a $GITHUB_OUTPUT
          cargo metadata --no-deps --format-version 1 | jq -r '"msrv=" + .packages[0].rust_version' | tee -a $GITHUB_OUTPUT
    outputs:
      name: ${{ steps.crate_metadata.outputs.name }}
      version: ${{ steps.crate_metadata.outputs.version }}
      maintainer: ${{ steps.crate_metadata.outputs.maintainer }}
      homepage: ${{ steps.crate_metadata.outputs.homepage }}
      msrv: ${{ steps.crate_metadata.outputs.msrv }}

  build:
    name: ${{ matrix.jobs.os }}-${{ matrix.jobs.target }}
    needs: [check, create_metadata]
    env:
      BUILD_CMD: cargo
      EXTENSION: ""
    runs-on: ${{ matrix.jobs.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install cross
        if: matrix.job.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Overwrite build command env variable
        if: matrix.job.use-cross
        shell: bash
        run: echo "BUILD_CMD=cross" >> $GITHUB_ENV
      - name: Show version information (Rust, cargo, GCC)
        shell: bash
        run: |
          gcc --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V
      - name: Add Extension variable on windows
        if: matrix.job.os == 'windows-latest'
        shell: bash
        run: echo "EXTENSION=.exe" >> $GITHUB_ENV
      - name: Build on ${{ matrix.job.target }}
        shell: bash
        run: $BUILD_CMD build --locked --all --release --target=${{ matrix.job.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: gh-stars-${{ matrix.job.target }}
          path: target/${{ matrix.job.target }}/release/gh-stars${{ env.EXTENSION }}
      - name: Prepare unix archive
        if: matrix.os != 'windows-latest'
        working-directory: target/${{ matrix.target }}/release
        run: |
          strip gh-stars
          tar czvf ../../../gh-stars-v${{ env.version }}-${{ matrix.target }}.tar.gz gh-stars
      - name: Prepare windows archive
        if: matrix.os == 'windows-latest'
        working-directory: target/${{ matrix.target }}/release
        run: |
          strip gh-stars.exe
          7z a ../../../gh-stars-v${{ env.version }}-${{ matrix.target }}.zip gh-stars.exe
      - name: Upload unix artifact
        uses: actions/upload-artifact@v4
        if: matrix.os != 'windows-latest'
        with:
          name: gh-stars-v${{ env.version }}-${{ matrix.target }}.tar.gz
          path: gh-stars-v${{ env.version }}-${{ matrix.target }}.tar.gz
          if-no-files-found: error
      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: gh-stars-v${{ env.version }}-${{ matrix.target }}.zip
          path: gh-stars-v${{ env.version }}-${{ matrix.target }}.zip
          if-no-files-found: error

  publish_crate:
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - publish_crate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the build metadata
        shell: bash
        run: |
          echo "version=$(grep -m 1 '^version = ' Cargo.toml | cut -f 3 -d ' ' | tr -d \")" >> $GITHUB_ENV
      - name: Download x86_64-unknown-linux-gnu.tar.gz
        uses: actions/download-artifact@v4
        with:
          name: gh-stars-v${{ env.version }}-x86_64-unknown-linux-gnu.tar.gz
          path: .
      # - name: Download x86_64-unknown-linux-musl.tar.gz
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: gh-stars-v${{ env.version }}-x86_64-unknown-linux-musl.tar.gz
      #     path: .
      - name: Download gh-stars-x86_64-apple-darwin.tar.gz
        uses: actions/download-artifact@v4
        with:
          name: gh-stars-v${{ env.version }}-x86_64-apple-darwin.tar.gz
          path: .
      - name: Download gh-stars-aarch64-apple-darwin.tar.gz
        uses: actions/download-artifact@v4
        with:
          name: gh-stars-v${{ env.version }}-aarch64-apple-darwin.tar.gz
          path: .
      - name: gh-stars-x86_64-pc-windows-msvc.zip
        uses: actions/download-artifact@v4
        with:
          name: gh-stars-v${{ env.version }}-x86_64-pc-windows-msvc.zip
          path: .
      - name: Generate checksums
        run: for file in gh-stars-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            gh-stars-v${{ env.version }}-x86_64-unknown-linux-gnu.tar.gz
            gh-stars-v${{ env.version }}-x86_64-unknown-linux-gnu.tar.gz.sha256
            gh-stars-v${{ env.version }}-x86_64-apple-darwin.tar.gz
            gh-stars-v${{ env.version }}-x86_64-apple-darwin.tar.gz.sha256
            gh-stars-v${{ env.version }}-aarch64-apple-darwin.tar.gz
            gh-stars-v${{ env.version }}-aarch64-apple-darwin.tar.gz.sha256
            gh-stars-v${{ env.version }}-x86_64-pc-windows-msvc.zip
            gh-stars-v${{ env.version }}-x86_64-pc-windows-msvc.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
